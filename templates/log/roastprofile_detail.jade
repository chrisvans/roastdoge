{% extends 'base.jade' %}
{% load staticfiles %}

{% block title%}Profile Detail{% endblock title %} RoastDoge

{% block css %}
link(href='{% static "javascripts/d3_visualization/css/nv.d3.css" %}', rel='stylesheet', type='text/css')
link(href='{% static "javascripts/d3_visualization/css/d3_vis.css" %}', rel='stylesheet', type='text/css', media='screen')
link(href='{% static "css/roastprofile_detail.css" %}', rel='stylesheet', type='text/css', media='screen')
{% endblock css %}

{% block content %}

h3
  ul
    li
      a(href="{% url 'coffeeroastprofile-list' roastprofile.coffee.id %}") Back to Profile List
    li
      a(href="{% url 'roastprofile-delete' roastprofile.id %}") Delete This Profile

div.detail
  p {{ roastprofile.name }}
  p {{ roastprofile.date }}
  div(id="profile-chart", style='height:350px;')

div#comments

{% endblock content %}

{% block javascripts %}

script(src="{% static 'javascripts/jquery-2.1.1.min.js' %}")
script(src="{% static 'javascripts/jquery.cookie.js' %}")
script(src='{% static "javascripts/d3_visualization/d3.v2.min.js" %}')
script(src='{% static "javascripts/d3_visualization/nv.d3.min.js" %}')
script(src='{% static "javascripts/d3_visualization/tooltip.js" %}')
script(src='{% static "javascripts/d3_visualization/utils.js" %}')
script(src='{% static "javascripts/d3_visualization/legend.js" %}')
script(src='{% static "javascripts/d3_visualization/axis.js" %}')
script(src="{% static 'javascripts/d3_visualization/line_chart/line.js' %}")
script(src="{% static 'javascripts/d3_visualization/line_chart/lineChart.js' %}")
script(src="{% static 'javascripts/d3_visualization/line_chart/lineChartModel.js' %}")
script(src="{% static 'javascripts/ajaxModels/setupAjax.js' %}")
script(src="{% static 'javascripts/ajaxModels/tempPoint.js' %}")

script
  // TODO: Development mode, variables exposed.  Close this when finished.
  var thisRoastProfileID = {{ roastprofile.id }}
  var commentCreateFormURL = "{% url 'ajax-temppoint-comment-create-form' %}"
  var commentUpdateURL = "{% url 'ajax-comment-update' %}"
  var commentCreateURL = "{% url 'ajax-temppoint-comment-create' %}"
  var commentDeleteURL = "{% url 'ajax-comment-delete' %}"
  var commentIconURL = "{% static 'svg_icons/comment2.svg' %}"
  var selectElement = '#profile-chart';

  // This MUST be updated with the id of any roast profile that gets added to the chart, with the value incrementing +1 each time
  var seriesMap = {}
  seriesMap[thisRoastProfileID] = '0'

  var data = {{ roastprofile.get_temp_graph_data_JSON|safe }};
  var margin = { top: 20, right: 20, bottom: 50, left: 40 };
  var width = 500 - margin.left - margin.right;
  var height = 350 - margin.top - margin.bottom;
  var pointIconCallback = function() {
    d3.selectAll('.svg-comment-icon').remove()

    for (var dataIndex=0; dataIndex<lineChartVis.data.length; dataIndex++) {
      if (!lineChartVis.data[dataIndex].hidden) {
        var roastLineID = lineChartVis.data[dataIndex].id.toString()
        var selectString = 'g.nv-group.nv-series-' + seriesMap[roastLineID] + ' > circle.nv-point'
        d3.selectAll(selectString).datum(lineChartVis.data);
        d3.selectAll(selectString).each(function(d, i) { 
          if (d[dataIndex].values[i].hasComments) { 
            var thisCircle = d3.select(this)

            var parentG = d3.select(thisCircle.node().parentNode)
            var iconSize = 16;
            parentG
              .append("image")
                .attr("xlink:href", commentIconURL)
                .attr("x", thisCircle.attr('cx') + iconSize/2)
                .attr("y", thisCircle.attr('cy') - iconSize)
                .attr("width", iconSize)
                .attr("height", iconSize)
                .attr("class", "svg-comment-icon temppoint_" + d[dataIndex].values[i].id);
          } 
        })
      }
    }
  }
  lineOptions = { 
    'selectElement': selectElement, 
    'data': data, 
    'margin': margin, 
    'width': width, 
    'height': height,
    'storedCallbacks': [pointIconCallback],
  }
  var lineChartVis = lineChartVisualization(lineOptions);
  var pointClickCallback = function() {
    lineChartVis.nvchart.lines.dispatch.on('elementClick', null)
    lineChartVis.nvchart.lines.dispatch.on('elementClick', function(element) {
      var pointOptions = {
        roastProfileID: element.series.id,
        id: element.point.id,
        commentCreateFormURL: commentCreateFormURL,
        commentCreateURL: commentCreateURL,
        commentUpdateURL: commentUpdateURL,
        commentDeleteURL: commentDeleteURL,
        commentIconURL: commentIconURL,
      }
      var tempPoint = tempPointModel(pointOptions);
      tempPoint.commentCreateForm();
    })
  }
  var legendClickCallback = function() {
    $(lineChartVis.selectElement + ' g.nvd3.nv-legend').on('click', function() {
      lineChartVis.updateChart()
    })
  }
  lineChartVis.createChart([pointClickCallback, legendClickCallback]);

  

{% endblock javascripts %}